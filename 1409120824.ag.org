#+BLOG: rubikitch
#+POSTID: 340
#+DATE: [2014-09-12 Fri 08:24]
#+PERMALINK: ag
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil \n:t
#+ISPAGE: nil
#+DESCRIPTION:
# (progn (erase-buffer)(find-file-hook--org2blog/wp-mode))
#+BLOG: rubikitch
#+CATEGORY: Emacs
#+EL_PKG_NAME: ag
#+EL_TAGS: emacs, emacs lisp %p, elisp %p, emacs %f %p, emacs %p 使い方, emacs %p 設定, emacs パッケージ %p, 
#+EL_TITLE: Emacs Lisp Elisp パッケージ インストール 設定 使い方
#+EL_TITLE0: the silver search(ag)の素晴しいインターフェース
#+begin: org2blog
#+DESCRIPTION: MELPAのEmacs Lispパッケージagの紹介
#+MYTAGS: package:ag, emacs 使い方, emacs コマンド, emacs, emacs lisp ag, elisp ag, emacs melpa ag, emacs ag 使い方, emacs ag 設定, emacs パッケージ ag, 
#+TITLE: emacs ag.el : the silver search(ag)の素晴しいインターフェース | MELPA Emacs Lisp Elisp パッケージ インストール 設定 使い方
#+BEGIN_HTML
<table>
<tr><td>パッケージ名</td><td>ag</td></tr>
<tr><td>概要(原文)</td><td>A front-end for ag ('the silver searcher'), the C ack replacement.</td></tr>
<tr><td>リポジトリ</td><td><a href="http://melpa.org/">MELPA</a></td></tr>
<tr><td>取得先</td><td><a href="https://github.com/Wilfred/ag.el">https://github.com/Wilfred/ag.el</a></td></tr>
<tr><td>バージョン</td><td>20141221.902</td></tr>
<tr><td>関連記事</td><td><a href="http://rubikitch.com/tag/package:ag/">package:ag</a> </td></tr>
</table>
<br />
#+END_HTML
ag.elは超高速grepのagのEmacsインターフェースです。

以下のコマンドが用意されています。

- *M-x ag*
- *M-x ag-files*
- *M-x ag-regexp*
- *M-x ag-project*
- *M-x ag-project-files*
- *M-x ag-project-regexp*
- *M-x ag-dired*
- *M-x ag-dired-regexp*
- *M-x ag-project-dired*
- *M-x ag-project-dired-regexp*


これらはautoloadされているので、設定は不要です。

M-x agは検索文字列(正規表現ではない)とディレクトリを入力してag検索します。

デフォルトの検索文字列は賢く判定してくれます。
- regionが指定してあるときはregionの文字列
- それ以外は現在位置のシンボル

projectがついたコマンドは、検索ディレクトリを
現在の *プロジェクト* ディレクトリにします。

ag.elにおいてのプロジェクトとは、 *git* / *svn* / *hg* の
ルートディレクトリがデフォルトになっていますが、
*ag-project-root-function* を変更することでより賢くできます。

filesがついたコマンドでは検索対象のファイル名の正規表現を指定できます。

regexpがついたコマンドは文字列検索ではなくて
Perl準拠の正規表現(PCRE)検索となります。

diredがついたコマンドは、 *M-x find-dired* 似のファイル名検索です。

ですが、バージョン管理システムで無視されるファイル名は表示しません。

また、 *projectile.el* と連携することができ、
*C-c p s s*でag-regexpが使えます。

*ag-wgrep.el* と併用することで、 *wgrep.el* による
ag検索結果の編集ができます。

# (progn (forward-line 1)(shell-command "screenshot-time.rb org_template" t))
** ag インストール
このパッケージはmelpaにあるので [[http://rubikitch.com/package-initialize][パッケージの初期設定]] を行ってください。

M-x package-refresh-contents
M-x package-install ag


#+end:
** 概要                                                             :noexport:
ag.elは超高速grepのagのEmacsインターフェースです。

以下のコマンドが用意されています。

- *M-x ag*
- *M-x ag-files*
- *M-x ag-regexp*
- *M-x ag-project*
- *M-x ag-project-files*
- *M-x ag-project-regexp*
- *M-x ag-dired*
- *M-x ag-dired-regexp*
- *M-x ag-project-dired*
- *M-x ag-project-dired-regexp*


これらはautoloadされているので、設定は不要です。

M-x agは検索文字列(正規表現ではない)とディレクトリを入力してag検索します。

デフォルトの検索文字列は賢く判定してくれます。
- regionが指定してあるときはregionの文字列
- それ以外は現在位置のシンボル

projectがついたコマンドは、検索ディレクトリを
現在の *プロジェクト* ディレクトリにします。

ag.elにおいてのプロジェクトとは、 *git* / *svn* / *hg* の
ルートディレクトリがデフォルトになっていますが、
*ag-project-root-function* を変更することでより賢くできます。

filesがついたコマンドでは検索対象のファイル名の正規表現を指定できます。

regexpがついたコマンドは文字列検索ではなくて
Perl準拠の正規表現(PCRE)検索となります。

diredがついたコマンドは、 *M-x find-dired* 似のファイル名検索です。

ですが、バージョン管理システムで無視されるファイル名は表示しません。

また、 *projectile.el* と連携することができ、
*C-c p s s*でag-regexpが使えます。

*ag-wgrep.el* と併用することで、 *wgrep.el* による
ag検索結果の編集ができます。

# (progn (forward-line 1)(shell-command "screenshot-time.rb org_template" t))
