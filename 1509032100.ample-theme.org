#+BLOG: rubikitch
#+POSTID: 1948
#+DATE: [2015-09-03 Thu 21:00]
#+PERMALINK: ample-theme
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil \n:t -:nil
#+ISPAGE: nil
#+DESCRIPTION:
# (progn (erase-buffer)(find-file-hook--org2blog/wp-mode))
#+BLOG: rubikitch
#+CATEGORY: Emacs, theme
#+EL_PKG_NAME: ample-theme
#+EL_TAGS: emacs, %p, %p.el, emacs lisp %p, elisp %p, emacs %f %p, emacs %p 使い方, emacs %p 設定, emacs パッケージ %p, emacs %p スクリーンショット, color-theme, カラーテーマ
#+EL_TITLE: Emacs Lisp Elisp パッケージ インストール 設定 使い方 スクリーンショット
#+EL_TITLE0: カラーテーマ三兄弟
#+EL_URL: 
#+begin: org2blog
#+DESCRIPTION: MELPAのEmacs Lispパッケージample-themeの紹介
#+MYTAGS: package:ample-theme, emacs 使い方, emacs コマンド, emacs, ample-theme, ample-theme.el, emacs lisp ample-theme, elisp ample-theme, emacs melpa ample-theme, emacs ample-theme 使い方, emacs ample-theme 設定, emacs パッケージ ample-theme, emacs ample-theme スクリーンショット, color-theme, カラーテーマ
#+TAGS: package:ample-theme, emacs 使い方, emacs コマンド, emacs, ample-theme, ample-theme.el, emacs lisp ample-theme, elisp ample-theme, emacs melpa ample-theme, emacs ample-theme 使い方, emacs ample-theme 設定, emacs パッケージ ample-theme, emacs ample-theme スクリーンショット, color-theme, カラーテーマ, Emacs, theme, ample-theme.el
#+TITLE: emacs ample-theme.el : カラーテーマ三兄弟 | MELPA Emacs Lisp Elisp パッケージ インストール 設定 使い方 スクリーンショット
#+BEGIN_HTML
<table>
<tr><td>パッケージ名</td><td>ample-theme</td></tr>
<tr><td>概要(原文)</td><td>Calm Dark Theme for Emacs</td></tr>
<tr><td>リポジトリ</td><td><a href="http://melpa.org/">MELPA</a></td></tr>
<tr><td>取得先</td><td><a href="https://github.com/jordonbiondo/ample-theme">https://github.com/jordonbiondo/ample-theme</a></td></tr>
<tr><td>バージョン</td><td>20150814.1101</td></tr>
<tr><td>関連記事</td><td><a href="http://rubikitch.com/tag/package:ample-theme/">package:ample-theme</a> </td></tr>
</table>
<br />
#+END_HTML
*ample-theme.el* は、以下のパッケージに対応したカラーテーマ群です。
- font lock
- mode line
- powerline
- search
- evil-search-highlight-persist
- ace-jump-mode
- minibuffer
- eshell
- shell
- erc
- error
- ido
- flx-ido
- helm
- jabber
- rainbow-delimiters
- auto-complete
- w3m
- ediff
- man
- org
- message-mode
- gnus
- whitespace-mode
- magit(new,old)
- trailing-whitespace
- auctex
- guide-key
- custom
- widget


以下のカラーテーマが定義されています。
#+begin: org2blog-sub-color-themes
- ample
- ample-flat
- ample-light

#+end:


[[http://i.imgur.com/WZjJty6.png][本家スクリーンショット]]
** ample-theme インストール
このパッケージはmelpaにあるので [[http://rubikitch.com/package-initialize][パッケージの初期設定]] を行ってください。

M-x package-refresh-contents
M-x package-install ample-theme


#+end:


[[http://i.imgur.com/WZjJty6.png][本家スクリーンショット]]
** ample-theme インストール
このパッケージはmelpaにあるので [[http://rubikitch.com/package-initialize][パッケージの初期設定]] を行ってください。

M-x package-refresh-contents
M-x package-install ample-theme


#+end:
** 概要                                                             :noexport:
*ample-theme.el* は、以下のパッケージに対応したカラーテーマ群です。
- font lock
- mode line
- powerline
- search
- evil-search-highlight-persist
- ace-jump-mode
- minibuffer
- eshell
- shell
- erc
- error
- ido
- flx-ido
- helm
- jabber
- rainbow-delimiters
- auto-complete
- w3m
- ediff
- man
- org
- message-mode
- gnus
- whitespace-mode
- magit(new,old)
- trailing-whitespace
- auctex
- guide-key
- custom
- widget


以下のカラーテーマが定義されています。
#+begin: org2blog-sub-color-themes
- ample
- ample-flat
- ample-light

#+end:


[[http://i.imgur.com/WZjJty6.png][本家スクリーンショット]]

** theme: ample
*** スクリーンショット
# (save-window-excursion (async-shell-command "emacs-test -eval '(load-theme (quote ample) t)'"))
# (progn (forward-line 1)(shell-command "screenshot-time.rb org_theme_template" t))
#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150903210204.png]]
Fig1: emacs-lisp-mode

#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150903210209.png]]
Fig2: magit

#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150903210212.png]]
Fig3: grep

#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150903210215.png]]
Fig4: outline-mode

#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150903210219.png]]
Fig5: org-mode

#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150903210222.png]]
Fig6: dired

#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150903210224.png]]
Fig7: web-mode

#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150903210227.png]]
Fig8: markdown-mode

#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150903210231.png]]
Fig9: helm


*** 設定
#+BEGIN_SRC fundamental
(load-theme 'ample t)
#+END_SRC

*** 実行方法
#+BEGIN_EXAMPLE
$ emacs -Q -f package-initialize -eval '(load-theme (quote ample) t)'
#+END_EXAMPLE

** theme: ample-flat
*** スクリーンショット
# (save-window-excursion (async-shell-command "emacs-test -eval '(load-theme (quote ample-flat) t)'"))
# (progn (forward-line 1)(shell-command "screenshot-time.rb org_theme_template" t))
#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150903210255.png]]
Fig10: emacs-lisp-mode

#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150903210300.png]]
Fig11: magit

#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150903210302.png]]
Fig12: grep

#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150903210305.png]]
Fig13: outline-mode

#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150903210307.png]]
Fig14: org-mode

#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150903210309.png]]
Fig15: dired

#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150903210312.png]]
Fig16: web-mode

#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150903210314.png]]
Fig17: markdown-mode

#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150903210318.png]]
Fig18: helm


*** 設定
#+BEGIN_SRC fundamental
(load-theme 'ample-flat t)
#+END_SRC

*** 実行方法
#+BEGIN_EXAMPLE
$ emacs -Q -f package-initialize -eval '(load-theme (quote ample-flat) t)'
#+END_EXAMPLE

** theme: ample-light
*** スクリーンショット
# (save-window-excursion (async-shell-command "emacs-test -eval '(load-theme (quote ample-light) t)'"))
# (progn (forward-line 1)(shell-command "screenshot-time.rb org_theme_template" t))
#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150905041534.png]]
Fig19: emacs-lisp-mode

#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150905041539.png]]
Fig20: magit

#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150905041542.png]]
Fig21: grep

#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150905041546.png]]
Fig22: outline-mode

#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150905041549.png]]
Fig23: org-mode

#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150905041551.png]]
Fig24: dired

#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150905041554.png]]
Fig25: web-mode

#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150905041556.png]]
Fig26: markdown-mode

#+ATTR_HTML: :width 480
[[file:/r/sync/screenshots/20150905041601.png]]
Fig27: helm


*** 設定
#+BEGIN_SRC fundamental
(load-theme 'ample-light t)
#+END_SRC

*** 実行方法
#+BEGIN_EXAMPLE
$ emacs -Q -f package-initialize -eval '(load-theme (quote ample-light) t)'
#+END_EXAMPLE


# (progn (forward-line 1)(shell-command "screenshot-time.rb org_template" t))
